!!! 5
{% autoescape None %}
html(lang="en")
  head
    meta(charset="utf-8")
    meta(http-equiv="X-UA-Compatible", content="IE=edge")
    meta(name="viewport", content="width=device-width, initial-scale=1")
    title Yandex.Tank online report

    link(rel="stylesheet", href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css")
    link(rel="stylesheet", href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css")

    link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/rickshaw/1.4.6/rickshaw.min.css")
    script(src="https://code.jquery.com/jquery.min.js")
    script(src="https://code.angularjs.org/1.2.24/angular.min.js")
    script(src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js")

    script(src="https://cdnjs.cloudflare.com/ajax/libs/rickshaw/1.4.6/rickshaw.min.js")

    style(type='text/css').
      .rickshaw_legend li {
        display: inline-block;
        padding: 0 0 0 2px;
        min-width: 80px;
        white-space: nowrap;
      }

    script(type="text/javascript").
      
      document.cached_data = {{cached_data}};
      (function() {
        // angular-rickshaw.js
        "use strict";
        angular.module("angular-rickshaw", []).directive("rickshaw", function($compile) {
          return {
            restrict: "EA",
            scope: {
              options: "=rickshawOptions",
              series: "=rickshawSeries",
              features: "=rickshawFeatures"
            },
            link: function(scope, element, attrs) {
              var getSettings, update;
              getSettings = function(el) {
                var settings;
                settings = angular.copy(scope.options);
                settings.element = el;
                settings.series = scope.series;
                return settings;
              };
              update = function() {
                var graphEl, highlighter, hoverConfig, hoverDetail, i, legend, legendEl, mainEl, palette, settings, shelving, time, xAxis, xAxisConfig, yAxis, yAxisConfig, yAxisSecondary, yAxisSecondaryConfig;
                mainEl = angular.element(element);
                mainEl.append(graphEl);
                mainEl.empty();
                graphEl = $compile("<div></div>")(scope);
                mainEl.append(graphEl);
                settings = getSettings(graphEl[0]);
                Rickshaw.Series.zeroFill(settings.series);
                scope.graph = new Rickshaw.Graph(settings);
                if (scope.features && scope.features.hover) {
                  hoverConfig = {
                    graph: scope.graph
                  };
                  hoverConfig.xFormatter = scope.features.hover.xFormatter;
                  hoverConfig.yFormatter = scope.features.hover.yFormatter;
                  hoverConfig.formatter = scope.features.hover.formatter;
                  hoverDetail = new Rickshaw.Graph.HoverDetail(hoverConfig);
                }
                if (scope.features && scope.features.palette) {
                  palette = new Rickshaw.Color.Palette({
                    scheme: scope.features.palette
                  });
                  i = 0;
                  while (i < settings.series.length) {
                    settings.series[i].color = palette.color();
                    i++;
                  }
                }
                scope.graph.render();
                if (scope.features && scope.features.xAxis) {
                  xAxisConfig = {
                    graph: scope.graph
                  };
                  if (scope.features.xAxis.timeUnit) {
                    time = new Rickshaw.Fixtures.Time();
                    xAxisConfig.timeUnit = time.unit(scope.features.xAxis.timeUnit);
                  }
                  xAxis = new Rickshaw.Graph.Axis.Time(xAxisConfig);
                  xAxis.render();
                }
                if (scope.features && scope.features.yAxis) {
                  yAxisConfig = {
                    graph: scope.graph,
                    orientation: 'left'
                  };
                  if (scope.features.yAxis.tickFormat) {
                    yAxisConfig.tickFormat = Rickshaw.Fixtures.Number[scope.features.yAxis.tickFormat];
                  }
                  yAxis = new Rickshaw.Graph.Axis.Y(yAxisConfig);
                  yAxis.render();
                }
                if (scope.features && scope.features.yAxisSecondary) {
                  yAxisSecondaryConfig = {
                    graph: scope.graph,
                    orientation: 'right'
                  };
                  if (scope.features.yAxisSecondary.tickFormat) {
                    yAxisSecondaryConfig.tickFormat = Rickshaw.Fixtures.Number[scope.features.yAxisSecondary.tickFormat];
                  }
                  yAxisSecondary = new Rickshaw.Graph.Axis.Y(yAxisSecondaryConfig);
                  yAxisSecondary.render();
                }
                if (scope.features && scope.features.legend) {
                  legendEl = $compile("<div></div>")(scope);
                  mainEl.append(legendEl);
                  legend = new Rickshaw.Graph.Legend({
                    graph: scope.graph,
                    element: legendEl[0]
                  });
                  if (scope.features.legend.toggle) {
                    shelving = new Rickshaw.Graph.Behavior.Series.Toggle({
                      graph: scope.graph,
                      legend: legend
                    });
                  }
                  if (scope.features.legend.highlight) {
                    highlighter = new Rickshaw.Graph.Behavior.Series.Highlight({
                      graph: scope.graph,
                      legend: legend
                    });
                  }
                }
              };
              scope.graph = void 0;
              scope.$watch("options", function(newValue, oldValue) {
                if (!angular.equals(newValue, oldValue)) {
                  update();
                }
              });
              scope.$watch("series", function(newValue, oldValue) {
                if (!angular.equals(newValue, oldValue)) {
                  update();
                }
              });
              scope.$watch("features", function(newValue, oldValue) {
                if (!angular.equals(newValue, oldValue)) {
                  update();
                }
              });
              scope.$on("DataUpdated", function() {
                return scope.graph.update();
              });
              return update();
            },
            controller: function($scope, $element, $attrs) {}
          };
        });

        // ws.js
        var app, collect_monitoring, collect_quantiles, collect_stats, collect_subtree,
          indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

        app = angular.module("ng-tank-report", ["angular-rickshaw"]);

        collect_subtree = function(storage, subtree, ts) {
          var key, node, results;
          results = [];
          for (key in subtree) {
            node = subtree[key];
            if (typeof node === 'number' || typeof node === 'array') {
              results.push(storage[key].push({
                x: ts,
                y: node
              }));
            } else {
              results.push(collect_subtree(storage[key], node, ts));
            }
          }
          return results;
        };

        collect_stats = function(stats) {
          var j, len, metric, ref, result, statItem, value;
          result = {};
          for (j = 0, len = stats.length; j < len; j++) {
            statItem = stats[j];
            ref = statItem.metrics;
            for (metric in ref) {
              value = ref[metric];
              if (!result[metric]) {
                result[metric] = [];
              }
              result[metric].push({
                x: +statItem.ts,
                y: +value
              });
            }
          }
          return result;
        };

        collect_monitoring = function(monitoring) {
          var host, hostData, j, len, metric, monItem, ref, ref1, result, subgroup, value;
          result = {};
          for (j = 0, len = monitoring.length; j < len; j++) {
            monItem = monitoring[j];
            ref = monItem.data;
            for (host in ref) {
              hostData = ref[host];
              if (!result[host]) {
                result[host] = {
                  comment: hostData.comment,
                  metrics: {}
                };
              }
              ref1 = hostData.metrics;
              for (metric in ref1) {
                value = ref1[metric];
                subgroup = metric.split("_", 1);
                if (!result[host].metrics[subgroup]) {
                  result[host].metrics[subgroup] = {};
                }
                if (!result[host].metrics[subgroup][metric]) {
                  result[host].metrics[subgroup][metric] = [];
                }
                result[host].metrics[subgroup][metric].push({
                  x: +monItem.timestamp,
                  y: +value
                });
              }
            }
          }
          return result;
        };

        collect_quantiles = function(data) {
          var dataItem, i, j, k, l, len, ref, ref1, ref2, result, tag, tagData;
          result = {
            overall: {
              interval_real: {
                q: {}
              }
            },
            tagged: {}
          };
          for (j = 0, len = data.length; j < len; j++) {
            dataItem = data[j];
            for (i = k = 0, ref = dataItem.overall.interval_real.q.q.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
              if (!result.overall.interval_real.q[dataItem.overall.interval_real.q.q[i]]) {
                result.overall.interval_real.q[dataItem.overall.interval_real.q.q[i]] = [];
              }
              result.overall.interval_real.q[dataItem.overall.interval_real.q.q[i]].push({
                x: dataItem.ts,
                y: dataItem.overall.interval_real.q.value[i]
              });
            }
            ref1 = dataItem.tagged;
            for (tag in ref1) {
              tagData = ref1[tag];
              if (!result.tagged[tag]) {
                result.tagged[tag] = {
                  interval_real: {
                    q: {}
                  }
                };
              }
              for (i = l = 0, ref2 = tagData.interval_real.q.q.length; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
                if (!result.tagged[tag].interval_real.q[tagData.interval_real.q.q[i]]) {
                  result.tagged[tag].interval_real.q[tagData.interval_real.q.q[i]] = [];
                }
                result.tagged[tag].interval_real.q[tagData.interval_real.q.q[i]].push({
                  x: dataItem.ts,
                  y: tagData.interval_real.q.value[i]
                });
              }
            }
          }
          return result;
        };

        app.controller("TankReport", function($scope, $element) {
          $scope.status = "Disconnected";
          $scope.data = document.cached_data.data;
          $scope.uuid = document.cached_data.uuid;
          $scope.updateData = function(tankData) {
            var data, storage, storages, ts;
            for (ts in tankData) {
              storages = tankData[ts];
              for (storage in storages) {
                data = storages[storage];
                collect_subtree($scope.data[storage], data, +ts);
              }
            }
            return $scope.$broadcast('DataUpdated');
          };
          $scope.buildSeries = function() {
            var areaGraphs, cache, data, hostData, hostname, metric, metrics, monitoringData, name, overallData, quantilesData, series, statsData, subgroup, taggedData;
            cache = document.cached_data.data;
            if (cache.stats && cache.data && cache.monitoring) {
              overallData = {};
              taggedData = {};
              quantilesData = collect_quantiles(cache.data);
              statsData = collect_stats(cache.stats);
              monitoringData = collect_monitoring(cache.monitoring);
            } else {
              overallData = {};
              taggedData = {};
              quantilesData = {};
              statsData = {};
              monitoringData = {};
              setTimeout((function() {
                return location.reload(true);
              }), 3000);
            }
            areaGraphs = ['CPU', 'Memory'];
            $scope.monitoringGraphData = (function() {
              var results;
              results = [];
              for (hostname in monitoringData) {
                hostData = monitoringData[hostname];
                results.push({
                  hostname: hostname,
                  charts: (function() {
                    var ref, results1;
                    ref = hostData.metrics;
                    results1 = [];
                    for (subgroup in ref) {
                      metrics = ref[subgroup];
                      results1.push({
                        name: subgroup,
                        features: {
                          palette: 'spectrum14',
                          hover: {},
                          xAxis: {},
                          yAxis: {},
                          ySecondaryAxis: {
                            scale: null
                          },
                          legend: {
                            toggle: true,
                            highlight: true
                          }
                        },
                        options: {
                          renderer: 'multi'
                        },
                        series: ((function() {
                          var results2;
                          results2 = [];
                          for (metric in metrics) {
                            series = metrics[metric];
                            results2.push({
                              name: metric,
                              data: series,
                              renderer: indexOf.call(areaGraphs, subgroup) >= 0 ? "area" : "line"
                            });
                          }
                          return results2;
                        })()).concat([
                          {
                            name: "Requests per second",
                            color: "red",
                            renderer: "line",
                            data: statsData.reqps
                          }
                        ])
                      });
                    }
                    return results1;
                  })()
                });
              }
              return results;
            })();
            $scope.quantilesGraphData = {
              name: "Response time quantiles",
              features: {
                palette: 'classic9',
                hover: {},
                xAxis: {},
                yAxis: {},
                legend: {
                  toggle: true,
                  highlight: true
                }
              },
              options: {
                renderer: 'area',
                stack: false,
                height: $element[0].offsetHeight - 45 - 62
              },
              series: ((function() {
                var ref, results;
                ref = quantilesData.overall.interval_real.q;
                results = [];
                for (name in ref) {
                  data = ref[name];
                  results.push({
                    name: name,
                    data: data
                  });
                }
                return results;
              })()).sort(function(a, b) {
                if (parseFloat(a.name) <= parseFloat(b.name)) {
                  return 1;
                } else {
                  return -1;
                }
              })
            };
            $scope.rps = {
              name: "Responses per second",
              features: {
                palette: 'spectrum14',
                hover: {},
                xAxis: {},
                yAxis: {},
                legend: {
                  toggle: true,
                  highlight: true
                }
              },
              options: {
                renderer: 'line'
              },
              series: [
                {
                  name: 'RPS',
                  data: overallData.RPS
                }
              ]
            };
            $scope.protoCodes = {
              name: "Protocol return codes",
              features: {
                palette: 'spectrum14',
                hover: {},
                xAxis: {},
                yAxis: {},
                legend: {
                  toggle: true,
                  highlight: true
                }
              },
              options: {
                renderer: 'area',
                stack: true,
                height: $element[0].offsetHeight - 45 - 62
              },
              series: ((function() {
                var ref, results;
                ref = overallData.http_codes;
                results = [];
                for (name in ref) {
                  data = ref[name];
                  results.push({
                    name: name,
                    data: data
                  });
                }
                return results;
              })()).sort(function(a, b) {
                if (parseFloat(a.name) <= parseFloat(b.name)) {
                  return 1;
                } else {
                  return -1;
                }
              })
            };
            return $scope.netCodes = {
              name: "Network return codes",
              features: {
                palette: 'spectrum14',
                hover: {},
                xAxis: {},
                yAxis: {},
                legend: {
                  toggle: true,
                  highlight: true
                }
              },
              options: {
                renderer: 'area',
                stack: true,
                height: $element[0].offsetHeight - 45 - 62
              },
              series: ((function() {
                var ref, results;
                ref = overallData.net_codes;
                results = [];
                for (name in ref) {
                  data = ref[name];
                  results.push({
                    name: name,
                    data: data
                  });
                }
                return results;
              })()).sort(function(a, b) {
                if (parseFloat(a.name) <= parseFloat(b.name)) {
                  return 1;
                } else {
                  return -1;
                }
              })
            };
          };
          return $scope.buildSeries();
        });

      }).call(this);
  body
    .app.container(ng-app="ng-tank-report", ng-controller="TankReport")
      h1.page-heading Yandex.Tank online report
      #status {{!status}}
      #quantiles
        h2.part-heading Response time metrics
        .row
          .col-md-10
            .panel.panel-default
              .panel-heading
                h3.panel-title {{!quantilesGraphData.name}}
              .panel-body
                rickshaw(
                  rickshaw-series="quantilesGraphData.series",
                  rickshaw-options="quantilesGraphData.options",
                  rickshaw-features="quantilesGraphData.features"
                  )
      #monitoring
        h2.part-heading Monitoring metrics
        .host(ng-repeat="host in monitoringGraphData")
          h3 {{!host.hostname}}
          .row
            .col-md-10(ng-repeat="chart in host.charts")
              .panel.panel-default
                .panel-heading
                  h3.panel-title {{!chart.name}}
                .panel-body
                  rickshaw(
                    rickshaw-series="chart.series",
                    rickshaw-options="chart.options",
                    rickshaw-features="chart.features"
                  )
